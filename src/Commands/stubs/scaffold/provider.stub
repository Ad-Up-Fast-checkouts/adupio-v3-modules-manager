<?php

namespace $NAMESPACE$;

use Illuminate\Support\ServiceProvider;
use Illuminate\Database\Eloquent\Factory;

class $CLASS$ extends ServiceProvider
{
    /**
     * @var string $cmsName
     */
    protected $cmsName = '$CMS$';

    /**
     * @var string $cmsNameLower
     */
    protected $cmsNameLower = '$LOWER_NAME$';

    /**
     * Boot the application events.
     *
     * @return void
     */
    public function boot()
    {
        $this->registerTranslations();
        $this->registerConfig();
        $this->registerViews();
        $this->loadMigrationsFrom(cms_path($this->cmsName, '$MIGRATIONS_PATH$'));
    }

    /**
     * Register the service provider.
     *
     * @return void
     */
    public function register()
    {
        $this->app->register(RouteServiceProvider::class);
    }

    /**
     * Register config.
     *
     * @return void
     */
    protected function registerConfig()
    {
        $this->publishes([
            cms_path($this->cmsName, '$PATH_CONFIG$/config.php') => config_path($this->cmsNameLower . '.php'),
        ], 'config');
        $this->mergeConfigFrom(
            cms_path($this->cmsName, '$PATH_CONFIG$/config.php'), $this->cmsNameLower
        );
    }

    /**
     * Register views.
     *
     * @return void
     */
    public function registerViews()
    {
        $viewPath = resource_path('views/modules/' . $this->cmsNameLower);

        $sourcePath = cms_path($this->cmsName, '$PATH_VIEWS$');

        $this->publishes([
            $sourcePath => $viewPath
        ], ['views', $this->cmsNameLower . '-module-views']);

        $this->loadViewsFrom(array_merge($this->getPublishableViewPaths(), [$sourcePath]), $this->cmsNameLower);
    }

    /**
     * Register translations.
     *
     * @return void
     */
    public function registerTranslations()
    {
        $langPath = resource_path('lang/modules/' . $this->cmsNameLower);

        if (is_dir($langPath)) {
            $this->loadTranslationsFrom($langPath, $this->cmsNameLower);
            $this->loadJsonTranslationsFrom($langPath, $this->cmsNameLower);
        } else {
            $this->loadTranslationsFrom(cms_path($this->cmsName, '$PATH_LANG$'), $this->cmsNameLower);
            $this->loadJsonTranslationsFrom(cms_path($this->cmsName, '$PATH_LANG$'), $this->cmsNameLower);
        }
    }

    /**
     * Get the services provided by the provider.
     *
     * @return array
     */
    public function provides()
    {
        return [];
    }

    private function getPublishableViewPaths(): array
    {
        $paths = [];
        foreach (\Config::get('view.paths') as $path) {
            if (is_dir($path . '/modules/' . $this->cmsNameLower)) {
                $paths[] = $path . '/modules/' . $this->cmsNameLower;
            }
        }
        return $paths;
    }
}
